include "sfbay-pilates-base.conf"

beam.agentsim.simulationName = "sfbay-pilates-baseline2023"

beam.agentsim.agents.modalBehaviors.multinomialLogit.params.ride_hail_transit_intercept = 0.0
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.ride_hail_intercept = 1.0
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.ride_hail_pooled_intercept = -1.5
beam.agentsim.agents.modalBehaviors.modeVotMultiplier.rideHailPooled = 14.0
beam.agentsim.agentSampleSizeAsFractionOfPopulation = 0.1

beam.agentsim.agents.rideHail.managers = [
  {
    name = "Uber"
    iterationStats.timeBinSizeInSec = 3600
    ##################################################################
    # RideHail
    ##################################################################
    # Initialization Type(PROCEDURAL | FILE)
    initialization.initType = "PROCEDURAL"
    # If PROCEDURAL, use these params
    # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
    initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
    initialization.procedural.initialLocation.home.radiusInMeters = 500
#     initialization.parking.filePath = ${beam.inputDirectory}"/../parking/sfbay_taz_unlimited_depots.csv"
    initialization.procedural.vehicleTypeId="2017_Toyota_RAV4_AWDc4"
    initialization.procedural.fractionOfInitialVehicleFleet = 0.002257
    # If FILE, use this param
    beam.agentsim.agents.rideHail.initialization.filePath=${beam.inputDirectory}"/rideHailFleet.csv.gz"
    # Ride Hailing General Params
    defaultBaseCost=5.1
    defaultCostPerMile=1.12
    defaultCostPerMinute=0.32
    pooledBaseCost=4.47
    pooledCostPerMile=0.84
    pooledCostPerMinute=0.00
    refuelThresholdInMeters=1000.0
    rideHailManager.radiusInMeters=5000
    iterationStats.timeBinSizeInSec=3600
    # SurgePricing parameters
    surgePricing.surgeLevelAdaptionStep=0.1
    surgePricing.minimumSurgeLevel=0.1
    # priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
    surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
    # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
    allocationManager.name="POOLING_ALONSO_MORA"
    allocationManager.alonsoMora.waitingTimeInSec = 1200
    allocationManager.alonsoMora.travelTimeDelayAsFraction= 0.5
    allocationManager.alonsoMora.solutionSpaceSizePerVehicle = 4
    allocationManager.alonsoMora.maxRequestsPerVehicle = 5
    allocationManager.requestBufferTimeoutInSeconds = 300
    # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
    repositioningManager.name="DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
    repositioningManager.timeout=300
    # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand=2.0
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemandForCAVs=1.7
    repositioningManager.demandFollowingRepositioningManager.fractionOfClosestClustersToConsider=0.2
    repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand=300
    # REPOSITIONING_LOW_WAITING_TIMES
    allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.007
    allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
    allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
    allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
    # repositioningMethod(TOP_SCORES | KMEANS)
    allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
    allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
    allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
    allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
    allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
    allocationManager.repositionLowWaitingTimes.demandWeight=4.0
    allocationManager.repositionLowWaitingTimes.produceDebugImages=true
  },
  {
      name = "Lyft"
      iterationStats.timeBinSizeInSec = 3600
      ##################################################################
      # RideHail
      ##################################################################
      # Initialization Type(PROCEDURAL | FILE)
      initialization.initType = "PROCEDURAL"
      # If PROCEDURAL, use these params
      # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
      initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
      initialization.procedural.initialLocation.home.radiusInMeters = 500
  #     initialization.parking.filePath = ${beam.inputDirectory}"/../parking/sfbay_taz_unlimited_depots.csv"
      initialization.procedural.vehicleTypeId="2017_Toyota_RAV4_AWDc4"
      initialization.procedural.fractionOfInitialVehicleFleet = 0.001443
      # If FILE, use this param
      beam.agentsim.agents.rideHail.initialization.filePath=${beam.inputDirectory}"/rideHailFleet.csv.gz"
      # Ride Hailing General Params
      defaultBaseCost=5.1
      defaultCostPerMile=1.12
      defaultCostPerMinute=0.32
      pooledBaseCost=4.47
      pooledCostPerMile=0.84
      pooledCostPerMinute=0.00
      refuelThresholdInMeters=1000.0
      rideHailManager.radiusInMeters=5000
      iterationStats.timeBinSizeInSec=3600
      # SurgePricing parameters
      surgePricing.surgeLevelAdaptionStep=0.1
      surgePricing.minimumSurgeLevel=0.1
      # priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
      surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
      # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
      allocationManager.name="POOLING_ALONSO_MORA"
      allocationManager.alonsoMora.waitingTimeInSec = 1200
      allocationManager.alonsoMora.travelTimeDelayAsFraction= 0.5
      allocationManager.alonsoMora.solutionSpaceSizePerVehicle = 4
      allocationManager.alonsoMora.maxRequestsPerVehicle = 5
      allocationManager.requestBufferTimeoutInSeconds = 300
      # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
      repositioningManager.name="DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
      repositioningManager.timeout=300
      # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
      repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand=2.0
      repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemandForCAVs=1.7
      repositioningManager.demandFollowingRepositioningManager.fractionOfClosestClustersToConsider=0.2
      repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand=300
      # REPOSITIONING_LOW_WAITING_TIMES
      allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.007
      allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
      allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
      allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
      # repositioningMethod(TOP_SCORES | KMEANS)
      allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
      allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
      allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
      allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
      allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
      allocationManager.repositionLowWaitingTimes.demandWeight=4.0
      allocationManager.repositionLowWaitingTimes.produceDebugImages=true
  }
]

beam.physsim.flowCapacityFactor = 0.035

# beam.physsim.overwriteLinkParamPath = ""
beam.physsim.network.overwriteRoadTypeProperties {
    motorway.alpha = 0.83 #Freeway
    motorway.beta = 5.5 #Freeway
    motorwayLink.alpha = 0.83 #Freeway-to-Freeway Connector
    motorwayLink.beta = 5.5 #Freeway-to-Freeway Connector
    trunk.alpha = 0.71 #Expressway
    trunk.beta = 2.1 #Expressway
    trunkLink.alpha = 0.83 #Ramp
    trunkLink.beta = 5.5 #Ramp
    primary.alpha = 0.6 #Super Arterial
    primary.beta = 3.5 #Super Arterial
    primaryLink.alpha = 0.83 #Ramp
    primaryLink.beta = 5.5 #Ramp
    secondary.alpha = 0.6 #Major Arterial
    secondary.beta = 3.5 #Major Arterial
    secondaryLink.alpha = 0.83 #Ramp
    secondaryLink.beta = 5.5 #Ramp
    tertiary.alpha = 0.6 #Minor Arterial
    tertiary.beta = 3.5 #Minor Arterial
    tertiaryLink.alpha = 0.83 #Ramp
    tertiaryLink.beta = 5.5 #Ramp
    minor.alpha = 0.6 #Collector
    minor.beta = 8.5 #Collector
    unclassified.alpha = 0.6 #Collector
    unclassified.beta = 8.5 #Collector
    residential.alpha = 0.6 #Local Street
    residential.beta = 8.5 #Local Street
    livingStreet.alpha = 0.6 #Alley
    livingStreet.beta = 8.5 #Alley
}

beam.agentsim.agents.freight {
  enabled = true
  plansFilePath = ${beam.inputDirectory}"/frism-plans-base/freight-merged-payload-plans.csv"
  toursFilePath = ${beam.inputDirectory}"/frism-plans-base/freight-merged-tours.csv"
  carriersFilePath = ${beam.inputDirectory}"/frism-plans-base/freight-merged-carriers.csv"
  isWgs = true
  generateFixedActivitiesDurations = true
  nonHGVLinkWeightMultiplier = 2.0
  tourSampleSizeAsFractionOfTotal = 0.1
}

beam.agentsim.agents.vehicles.enroute.remainingDistanceWrtBatteryCapacityThreshold = 0
# beam.physsim.eventsForFullVersionOfVia = false
beam.agentsim.agents.vehicles.vehicleTypesFilePath = ${beam.inputDirectory}"/atlas-vehicles/vehicleTypes_baseline-freight.csv"
beam.physsim.inputNetworkFilePath = ${beam.inputDirectory}"/r5-hgv/physsim-network.xml"
beam.warmStart.initialLinkstatsFilePath = ${beam.inputDirectory}"/r5-hgv/init.linkstats.csv.gz"
beam.physsim.linkStatsWriteInterval = 1
beam.physsim.writePlansInterval = 1
beam.physsim.skipPhysSim = false
beam.routing {
  #Base local date in ISO 8061 YYYY-MM-DDTHH:MM:SS+HH:MM
  baseDate = "2017-09-22T00:00:00-07:00"
  transitOnStreetNetwork = true
  r5 {
    # Departure window in min
    departureWindow = 1.0167
    mNetBuilder.fromCRS = "epsg:4326" # WGS84
    mNetBuilder.toCRS = ${beam.spatial.localCRS}
    directory = ${beam.inputDirectory}"/r5-hgv"
    osmFile = ${beam.inputDirectory}"/r5-hgv/sfbay-links-filtered-by-zoneids.osm.pbf"
    osmMapdbFile = ${beam.inputDirectory}"/r5-hgv/osm.mapdb"
  }
#   skim {
#     writeSkimsInterval = 1
#     writeAggregatedSkimsInterval = 1
#   }
}

######## Router/Skim
# beam.routing.carRouter="R5"
# beam.router.skim {
#   keepKLatestSkims = 1
#   writeSkimsInterval = 1
#   writeAggregatedSkimsInterval = 1
#   travel-time-skimmer {
#     name = "travel-time-skimmer"
#     fileBaseName = "skimsTravelTimeObservedVsSimulated"
#   }
#   origin-destination-skimmer {
#     name = "od-skimmer"
#     fileBaseName = "skimsOD"
#     writeAllModeSkimsForPeakNonPeakPeriodsInterval = 0
#     writeFullSkimsInterval = 0
#     poolingTravelTimeOveheadFactor = 1.21
#   }
#   taz-skimmer {
#     name = "taz-skimmer"
#     fileBaseName = "skimsTAZ"
#   }
#   transit-crowding-skimmer {
#     name = "transit-crowding-skimmer"
#     fileBaseName = "skimsTransitCrowding"
#   }
# }

beam.debug.vmInformation.createGCClassHistogram = false
beam.agentsim.agents.freight.nonHGVLinkWeightMultiplier = 2.0
beam.agentsim.agents.freight.tourSampleSizeAsFractionOfTotal = 0.1
beam.agentsim.chargingNetworkManager.chargingPointCountScalingFactor = 0.1
beam.agentsim.chargingNetworkManager.chargingPointCostScalingFactor = 0.1
beam.agentsim.taz.parkingStallCountScalingFactor = 0.1
beam.agentsim.taz.parkingCostScalingFactor = 0.1
beam.agentsim.agents.freight.nonHGVLinkWeightMultiplier = 2.0

