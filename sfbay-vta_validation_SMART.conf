include "sfbay-pilates-baseline2_0_30pct_no_asim_modes.conf"

# The name given to the scenario being run
# For each model run, BEAM will create a folder in the "output" folder which starts with this name,
# to easily identify multiple runs.
beam.agentsim.simulationName = "vta-val_30pct_SMART_S2S_3veh3"

# The path to the vehicleTypes file required for the service.
# It is unlikely that this will need to be changed, but the vehicleTypes file may be modified to include new vehicles.
beam.agentsim.agents.vehicles.vehicleTypesFilePath = ${beam.inputDirectory}"/vta_data/SMART/vehicleTypes.csv"

# These parameters are used in the mode choice for the pooled ride hail mode
# Using these values results in more realistic behavior with the on-demand-transit service,
# which is restricted to the pooled ride mode.
# It is recommended not to change them.
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.ride_hail_pooled_intercept = -5.5
beam.agentsim.agents.modalBehaviors.modeVotMultiplier.rideHailPooled = 2

# The random seed, which affects the random number generation
# Changing this value allows one to "sample" multiple runs from the same configuration
# If comparing different services with multiple runs, it is recommended to use the same series of randomSeed values for each.
matsim.modules.global.randomSeed=1234

# This defines the ride hail services.
# Each block ("{ }" section) denotes a separate service which is simulated during the BEAM model run
beam.agentsim.agents.rideHail.managers = [
    {
        ##################################################################
        # The following parameters can be modified to change the ride hail service
        ##################################################################
        
        # The name of the service manager (referenced in the fleet file as rideHailManagerId)
        name = "SMART_Shuttle"
        
        # The location of the ride hail fleet specification file
        initialization.filePath=${beam.inputDirectory}"/vta_data/SMART/rideHailFleet_3veh3.csv"
        
        # The location of the stops file. Comment this out if you want to enable point-to-point service.
        stopFilePath = ${beam.inputDirectory}"/vta_data/SMART/stops_SMART_reproj.csv"
        # The maximum distance (in meters) that agents will consider walking to or from a stop.
        maximumWalkDistanceToStopInM = 800.0

        # Fare specification.
        # For a flat fare, defaultBaseCost and pooledBaseCost can be set to the fare.
        # Additional cost can be added per mile and minute if desired.
        defaultBaseCost=2.5
        defaultCostPerMile=0
        defaultCostPerMinute=0
        pooledBaseCost=2.5
        pooledCostPerMile=0
        pooledCostPerMinute=0
        
        # supportedModes is kept as "ride_hail_pooled" to force riders to be open to sharing rides
        # Commenting this line out will allow riders to reserve a solo ride, and the service will
        # act like a more conventional Uber/Lyft service.
        supportedModes="ride_hail_pooled"
        
        ##################################################################
        # The following parameters should remain fixed
        ##################################################################
        
        iterationStats.timeBinSizeInSec = 3600
        # Initialization Type(PROCEDURAL | FILE)
        initialization.initType = "FILE"
        # If PROCEDURAL, use these params
        # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
        initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
        initialization.procedural.initialLocation.home.radiusInMeters = 500
        initialization.procedural.vehicleTypeId="cv-L1-61000-2019"
        initialization.procedural.fractionOfInitialVehicleFleet = 0.00184043
        # Ride Hailing General Params
        refuelThresholdInMeters=1000.0
        rideHailManager.radiusInMeters=5000
        iterationStats.timeBinSizeInSec=3600
        # SurgePricing parameters
        surgePricing.surgeLevelAdaptionStep=0.1
        surgePricing.minimumSurgeLevel=0.1
        # priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
        surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
        # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
        allocationManager.name="POOLING_ALONSO_MORA"
        allocationManager.alonsoMora.waitingTimeInSec = 1200
        allocationManager.alonsoMora.travelTimeDelayAsFraction= 0.5
        allocationManager.alonsoMora.solutionSpaceSizePerVehicle = 4
        allocationManager.alonsoMora.maxRequestsPerVehicle = 5
        allocationManager.requestBufferTimeoutInSeconds = 300
        # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
        repositioningManager.name="DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
        repositioningManager.timeout=300
        # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
        repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand=2.0
        repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemandForCAVs=1.7
        repositioningManager.demandFollowingRepositioningManager.fractionOfClosestClustersToConsider=0.2
        repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand=300
        # REPOSITIONING_LOW_WAITING_TIMES
        allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.007
        allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
        allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
        allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
        # repositioningMethod(TOP_SCORES | KMEANS)
        allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
        allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
        allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
        allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
        allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
        allocationManager.repositionLowWaitingTimes.demandWeight=4.0
        allocationManager.repositionLowWaitingTimes.produceDebugImages=true
    },
    {
        ##################################################################
        # The specification for Uber service - don't change this
        ##################################################################

        name = "Uber"
        iterationStats.timeBinSizeInSec = 3600
        ##################################################################
        # RideHail
        ##################################################################
        # Initialization Type(PROCEDURAL | FILE)
        initialization.initType = "PROCEDURAL"
        # If PROCEDURAL, use these params
        # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
        initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
        initialization.procedural.initialLocation.home.radiusInMeters = 500
        # initialization.parking.filePath = ${beam.inputDirectory}"/../parking/sfbay_taz_unlimited_depots.csv"
        initialization.procedural.vehicleTypeId="cv-L1-61000-2019"
        initialization.procedural.fractionOfInitialVehicleFleet = 0.00287777
        # If FILE, use this param
        initialization.filePath=${beam.inputDirectory}"/rideHailFleet.csv.gz"
        # Ride Hailing General Params
        defaultBaseCost=5.1
        defaultCostPerMile=1.12
        defaultCostPerMinute=0.32
        pooledBaseCost=4.47
        pooledCostPerMile=0.84
        pooledCostPerMinute=0.00
        refuelThresholdInMeters=1000.0
        rideHailManager.radiusInMeters=5000
        iterationStats.timeBinSizeInSec=3600
        # SurgePricing parameters
        surgePricing.surgeLevelAdaptionStep=0.1
        surgePricing.minimumSurgeLevel=0.1
        # priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
        surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
        # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
        allocationManager.name="POOLING_ALONSO_MORA"
        allocationManager.alonsoMora.waitingTimeInSec = 1200
        allocationManager.alonsoMora.travelTimeDelayAsFraction= 0.5
        allocationManager.alonsoMora.solutionSpaceSizePerVehicle = 4
        allocationManager.alonsoMora.maxRequestsPerVehicle = 5
        allocationManager.requestBufferTimeoutInSeconds = 300
        # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
        repositioningManager.name="DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
        repositioningManager.timeout=300
        # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
        repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand=2.0
        repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemandForCAVs=1.7
        repositioningManager.demandFollowingRepositioningManager.fractionOfClosestClustersToConsider=0.2
        repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand=300
        # REPOSITIONING_LOW_WAITING_TIMES
        allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.007
        allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
        allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
        allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
        # repositioningMethod(TOP_SCORES | KMEANS)
        allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
        allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
        allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
        allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
        allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
        allocationManager.repositionLowWaitingTimes.demandWeight=4.0
        allocationManager.repositionLowWaitingTimes.produceDebugImages=true
    },
    {
        ##################################################################
        # The specification for Lyft service - don't change this
        ##################################################################
        
        name = "Lyft"
        iterationStats.timeBinSizeInSec = 3600
        ##################################################################
        # RideHail
        ##################################################################
        # Initialization Type(PROCEDURAL | FILE)
        initialization.initType = "PROCEDURAL"
        # If PROCEDURAL, use these params
        # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
        initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
        initialization.procedural.initialLocation.home.radiusInMeters = 500
        # initialization.parking.filePath = ${beam.inputDirectory}"/../parking/sfbay_taz_unlimited_depots.csv"
        initialization.procedural.vehicleTypeId="cv-L1-61000-2019"
        initialization.procedural.fractionOfInitialVehicleFleet = 0.00184043
        # If FILE, use this param
        initialization.filePath=${beam.inputDirectory}"/rideHailFleet.csv.gz"
        # Ride Hailing General Params
        defaultBaseCost=5.1
        defaultCostPerMile=1.12
        defaultCostPerMinute=0.32
        pooledBaseCost=4.47
        pooledCostPerMile=0.84
        pooledCostPerMinute=0.00
        refuelThresholdInMeters=1000.0
        rideHailManager.radiusInMeters=5000
        iterationStats.timeBinSizeInSec=3600
        # SurgePricing parameters
        surgePricing.surgeLevelAdaptionStep=0.1
        surgePricing.minimumSurgeLevel=0.1
        # priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
        surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
        # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
        allocationManager.name="POOLING_ALONSO_MORA"
        allocationManager.alonsoMora.waitingTimeInSec = 1200
        allocationManager.alonsoMora.travelTimeDelayAsFraction= 0.5
        allocationManager.alonsoMora.solutionSpaceSizePerVehicle = 4
        allocationManager.alonsoMora.maxRequestsPerVehicle = 5
        allocationManager.requestBufferTimeoutInSeconds = 300
        # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
        repositioningManager.name="DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
        repositioningManager.timeout=300
        # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
        repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand=2.0
        repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemandForCAVs=1.7
        repositioningManager.demandFollowingRepositioningManager.fractionOfClosestClustersToConsider=0.2
        repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand=300
        # REPOSITIONING_LOW_WAITING_TIMES
        allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.007
        allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
        allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
        allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
        # repositioningMethod(TOP_SCORES | KMEANS)
        allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
        allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
        allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
        allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
        allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
        allocationManager.repositionLowWaitingTimes.demandWeight=4.0
        allocationManager.repositionLowWaitingTimes.produceDebugImages=true
    }
]