include "sfbay-base.conf"

beam.agentsim.simulationName = "sfbay-smart2"

beam.agentsim.agentSampleSizeAsFractionOfPopulation = 0.01

beam.agentsim.agentSampleSizeAsFractionOfPopulation = 1.0
beam.agentsim.firstIteration = 0
beam.agentsim.lastIteration = 0

beam.outputs.defaultWriteInterval=1
beam.router.skim.writeSkimsInterval = 1
beam.input.lastBaseOutputDir = ${beam.outputs.baseOutputDirectory}
beam.input.simulationPrefix = "year"
beam.agentsim.agents.plans.merge.fraction = 0.4
beam.warmStart.type = "linkStatsFromLastRun"
beam.warmStart.initialLinkstatsFilePath = ${beam.inputDirectory}"/../r5-simple-no-local/init.linkstats.csv.gz"
beam.exchange {
  output {
    activitySimSkimsEnabled = true
  }
}

beam.warmStart.type = "linkStatsOnly"
beam.warmStart.path = ${beam.inputDirectory}"/../activitysim/2018/warmstart_data.zip"

beam.agentsim.agents.rideHail.managers = [
  {
    name = "Uber"
    iterationStats.timeBinSizeInSec = 3600
    ##################################################################
    # RideHail
    ##################################################################
    # Initialization Type(PROCEDURAL | FILE)
    initialization.initType = "PROCEDURAL"
    # If PROCEDURAL, use these params
    # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
    initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
    initialization.procedural.initialLocation.home.radiusInMeters = 500
    initialization.procedural.vehicleTypeId="conv-L1-75000-to-100000-LowTech-2019"
    initialization.procedural.fractionOfInitialVehicleFleet = 0.06667
    # If FILE, use this param
    #not found
    beam.agentsim.agents.rideHail.initialization.filePath=${beam.inputDirectory}"/../rideHailFleet.csv.gz"
    # Ride Hailing General Params
    defaultBaseCost=1.8
    defaultCostPerMile=0.91
    defaultCostPerMinute=0.28
    pooledBaseCost=1.89
    pooledCostPerMile=1.11
    pooledCostPerMinute=0.07
    refuelThresholdInMeters=1000.0
    rideHailManager.radiusInMeters=5000
    iterationStats.timeBinSizeInSec=3600
    # SurgePricing parameters
    surgePricing.surgeLevelAdaptionStep=0.1
    surgePricing.minimumSurgeLevel=0.1
    # priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
    surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
    # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
    allocationManager.name="POOLING_ALONSO_MORA"
    allocationManager.alonsoMora.waitingTimeInSec = 1200
    allocationManager.alonsoMora.travelTimeDelayAsFraction= 0.5
    allocationManager.alonsoMora.solutionSpaceSizePerVehicle = 4
    allocationManager.requestBufferTimeoutInSeconds = 300
    # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
    repositioningManager.name="DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
    repositioningManager.timeout=300
    # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand=2.0
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemandForCAVs=1.7
    repositioningManager.demandFollowingRepositioningManager.fractionOfClosestClustersToConsider=0.2
    repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand=300
    # REPOSITIONING_LOW_WAITING_TIMES
    allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.007
    allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
    allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
    allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
    # repositioningMethod(TOP_SCORES | KMEANS)
    allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
    allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
    allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
    allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
    allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
    allocationManager.repositionLowWaitingTimes.demandWeight=4.0
    allocationManager.repositionLowWaitingTimes.produceDebugImages=true
  }
]

# beam.routing.r5.travelTimeNoiseFraction = 0.15
# beam.physsim.jdeqsim.cacc.adjustedMinimumRoadSpeedInMetersPerSecond = 2.0
# beam.physsim.network.overwriteRoadTypeProperties.primaryLink.capacity = 4000
# beam.physsim.network.overwriteRoadTypeProperties.primaryLink.speed = 23.7
# beam.physsim.network.overwriteRoadTypeProperties.primary.speed = 27.7
# beam.physsim.network.overwriteRoadTypeProperties.motorwayLink.capacity = 4000
# beam.physsim.network.overwriteRoadTypeProperties.motorwayLink.speed = 30.3
# beam.physsim.network.overwriteRoadTypeProperties.trunkLink.capacity = 3000
# beam.physsim.network.overwriteRoadTypeProperties.trunkLink.speed = 25.5
# beam.physsim.network.overwriteRoadTypeProperties.secondaryLink.capacity = 3000
# beam.physsim.network.overwriteRoadTypeProperties.secondary.speed = 27.0
# beam.physsim.network.overwriteRoadTypeProperties.secondaryLink.speed = 25.8
# beam.physsim.network.overwriteRoadTypeProperties.unclassified.capacity = 3000
# beam.physsim.network.overwriteRoadTypeProperties.road.capacity = 3000



#attributes in the Dima config, not in the pilates config

#     allocationManager.maxWaitingTimeInSec = 900
#     allocationManager.maxExcessRideTime = 0.5 # up to +50%
    # ASYNC_GREEDY_VEHICLE_CENTRIC_MATCHING, ALONSO_MORA_MATCHING_WITH_ASYNC_GREEDY_ASSIGNMENT, ALONSO_MORA_MATCHING_WITH_MIP_ASSIGNMENT
#     allocationManager.matchingAlgorithm = "ALONSO_MORA_MATCHING_WITH_ASYNC_GREEDY_ASSIGNMENT"
#     allocationManager.alonsoMora.maxRequestsPerVehicle = 5
    # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES | INVERSE_SQUARE_DISTANCE_REPOSITIONING_FACTOR
    # DEMAND_FOLLOWING_REPOSITIONING_MANAGER

    # REPOSITIONING_LOW_WAITING_TIMES
#     allocationManager.repositionLowWaitingTimes.repositionCircleRadiusInMeters = 3000

#     allocationManager.repositionLowWaitingTimes.minimumNumberOfIdlingVehiclesThresholdForRepositioning = 1
    # repositioningMethod(TOP_SCORES | KMEANS)
