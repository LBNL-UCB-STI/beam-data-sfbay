include "sfbay-base.conf"

beam.agentsim.simulationName = "sfbay-smart2-default"
beam.agentsim.firstIteration = 0
beam.agentsim.lastIteration = 5
# beam.agentsim.agentSampleSizeAsFractionOfPopulation = 0.1
# beam.outputs.defaultWriteInterval=1
# beam.router.skim.writeSkimsInterval = 1
# beam.input.lastBaseOutputDir = ${beam.outputs.baseOutputDirectory}
# beam.input.simulationPrefix = "year"
# beam.agentsim.agents.plans.merge.fraction = 0.4
# beam.exchange {
#   output {
#     activitySimSkimsEnabled = true
#   }
# }
beam.agentsim.agents.rideHail.managers = [
  {
    name = "Uber"
    iterationStats.timeBinSizeInSec = 3600
    ##################################################################
    # RideHail
    ##################################################################
    # Initialization Type(PROCEDURAL | FILE)
    initialization.initType = "PROCEDURAL"
    # If PROCEDURAL, use these params
    # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
    initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
    initialization.procedural.initialLocation.home.radiusInMeters = 500
    initialization.parking.filePath = ${beam.inputDirectory}"/../parking/sfbay_taz_unlimited_depots.csv"
    initialization.procedural.vehicleTypeId="conv-L1-75000-to-100000-LowTech-2019"
    initialization.procedural.fractionOfInitialVehicleFleet = 0.06667
    # If FILE, use this param
    beam.agentsim.agents.rideHail.initialization.filePath=${beam.inputDirectory}"/../rideHailFleet.csv.gz"
    # Ride Hailing General Params
    defaultBaseCost=1.8
    defaultCostPerMile=0.91
    defaultCostPerMinute=0.28
    pooledBaseCost=1.89
    pooledCostPerMile=1.11
    pooledCostPerMinute=0.07
    refuelThresholdInMeters=1000.0
    rideHailManager.radiusInMeters=5000
    iterationStats.timeBinSizeInSec=3600
    # SurgePricing parameters
    surgePricing.surgeLevelAdaptionStep=0.1
    surgePricing.minimumSurgeLevel=0.1
    # priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
    surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
    # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
    allocationManager.name="POOLING_ALONSO_MORA"
    allocationManager.alonsoMora.waitingTimeInSec = 1200
    allocationManager.alonsoMora.travelTimeDelayAsFraction= 0.5
    allocationManager.alonsoMora.solutionSpaceSizePerVehicle = 4
    allocationManager.alonsoMora.maxRequestsPerVehicle = 5
    allocationManager.requestBufferTimeoutInSeconds = 300
    # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
    repositioningManager.name="DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
    repositioningManager.timeout=300
    # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand=2.0
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemandForCAVs=1.7
    repositioningManager.demandFollowingRepositioningManager.fractionOfClosestClustersToConsider=0.2
    repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand=300
    # REPOSITIONING_LOW_WAITING_TIMES
    allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.007
    allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
    allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
    allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
    # repositioningMethod(TOP_SCORES | KMEANS)
    allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
    allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
    allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
    allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
    allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
    allocationManager.repositionLowWaitingTimes.demandWeight=4.0
    allocationManager.repositionLowWaitingTimes.produceDebugImages=true
  }
]

# beam.warmStart.type = "linkStatsFromLastRun"
# beam.warmStart.initialLinkstatsFilePath = ${beam.inputDirectory}"/../r5-simple-no-local/init.linkstats.csv.gz"

# ###########################
# # DEMAND
# ###########################
# beam.exchange.scenario {
#   #source for now can be "MATSim" or "UrbanSim"
#   source = "urbansim_v2"
#   # Input file format for scenario loader can be "csv" or "parquet"
#   fileFormat = "csv"
#   folder = ${beam.inputDirectory}"/urbansim"
#   convertWgs2Utm = true
#   modeMap = [
#     "BIKE           -> bike",
#     "DRIVEALONEFREE -> car",
#     "DRIVEALONEPAY  -> car",
#     "DRIVE_COM      -> drive_transit",
#     "DRIVE_EXP      -> drive_transit",
#     "DRIVE_HVY      -> drive_transit",
#     "DRIVE_LOC      -> drive_transit",
#     "DRIVE_LRF      -> drive_transit",
#     "SHARED2FREE    -> car",
#     "SHARED2PAY     -> car",
#     "SHARED3FREE    -> car",
#     "SHARED3PAY     -> car",
#     "TAXI           -> ride_hail",
#     "TNC_SHARED     -> ride_hail",
#     "TNC_SINGLE     -> ride_hail",
#     "WALK           -> walk",
#     "WALK_COM       -> walk_transit",
#     "WALK_EXP       -> walk_transit",
#     "WALK_HVY       -> walk_transit",
#     "WALK_LOC       -> walk_transit",
#     "WALK_LRF       -> walk_transit",
#   ]
# }

# beam.routing.r5.travelTimeNoiseFraction = 0.15
# beam.physsim.jdeqsim.cacc.adjustedMinimumRoadSpeedInMetersPerSecond = 2.0
# beam.physsim.network.overwriteRoadTypeProperties.primaryLink.capacity = 4000
# beam.physsim.network.overwriteRoadTypeProperties.primaryLink.speed = 23.7
# beam.physsim.network.overwriteRoadTypeProperties.primary.speed = 27.7
# beam.physsim.network.overwriteRoadTypeProperties.motorwayLink.capacity = 4000
# beam.physsim.network.overwriteRoadTypeProperties.motorwayLink.speed = 30.3
# beam.physsim.network.overwriteRoadTypeProperties.trunkLink.capacity = 3000
# beam.physsim.network.overwriteRoadTypeProperties.trunkLink.speed = 25.5
# beam.physsim.network.overwriteRoadTypeProperties.secondaryLink.capacity = 3000
# beam.physsim.network.overwriteRoadTypeProperties.secondary.speed = 27.0
# beam.physsim.network.overwriteRoadTypeProperties.secondaryLink.speed = 25.8
# beam.physsim.network.overwriteRoadTypeProperties.unclassified.capacity = 3000
# beam.physsim.network.overwriteRoadTypeProperties.road.capacity = 3000


