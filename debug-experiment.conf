include "sfbay-pilates-baseline2_0.conf"
beam.debug.messageLogging = true
beam.outputs.writeEventsInterval = 1

beam.agentsim.agents.modalBehaviors.multinomialLogit.params.ride_hail_transit_intercept = 10000
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.ride_hail_intercept = -10000
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.ride_hail_pooled_intercept = -10000

beam.agentsim.agents.rideHail.managers = [
  {
    name = "Uber"
    supportedModes="ride_hail_pooled"
    iterationStats.timeBinSizeInSec = 3600
    ##################################################################
    # RideHail
    ##################################################################
    # Initialization Type(PROCEDURAL | FILE)
    initialization.initType = "PROCEDURAL"
    # If PROCEDURAL, use these params
    # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
    initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
    initialization.procedural.initialLocation.home.radiusInMeters = 500
    #     initialization.parking.filePath = ${beam.inputDirectory}"/../parking/sfbay_taz_unlimited_depots.csv"
    initialization.procedural.vehicleTypeId="cv-L1-61000-2019"
    initialization.procedural.fractionOfInitialVehicleFleet = 0.00287777
    # If FILE, use this param
    initialization.filePath=${beam.inputDirectory}"/rideHailFleet.csv.gz"
    # Ride Hailing General Params
    defaultBaseCost=100.1
    defaultCostPerMile=1.12
    defaultCostPerMinute=0.32
    pooledBaseCost=0
    pooledCostPerMile=0
    pooledCostPerMinute=0.00
    refuelThresholdInMeters=1000.0
    rideHailManager.radiusInMeters=5000
    iterationStats.timeBinSizeInSec=3600
    # SurgePricing parameters
    surgePricing.surgeLevelAdaptionStep=0.1
    surgePricing.minimumSurgeLevel=0.1
    # priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
    surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
    # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
    allocationManager.name="POOLING_ALONSO_MORA"
    allocationManager.alonsoMora.waitingTimeInSec = 1200
    allocationManager.alonsoMora.travelTimeDelayAsFraction= 0.5
    allocationManager.alonsoMora.solutionSpaceSizePerVehicle = 4
    allocationManager.alonsoMora.maxRequestsPerVehicle = 5
    allocationManager.requestBufferTimeoutInSeconds = 300
    # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
    repositioningManager.name="DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
    repositioningManager.timeout=300
    # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand=2.0
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemandForCAVs=1.7
    repositioningManager.demandFollowingRepositioningManager.fractionOfClosestClustersToConsider=0.2
    repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand=300
    # REPOSITIONING_LOW_WAITING_TIMES
    allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.007
    allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
    allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
    allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
    # repositioningMethod(TOP_SCORES | KMEANS)
    allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
    allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
    allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
    allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
    allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
    allocationManager.repositionLowWaitingTimes.demandWeight=4.0
    allocationManager.repositionLowWaitingTimes.produceDebugImages=true
  },
  {
    name = "Lyft"
    supportedModes="ride_hail_pooled"
    iterationStats.timeBinSizeInSec = 3600
    ##################################################################
    # RideHail
    ##################################################################
    # Initialization Type(PROCEDURAL | FILE)
    initialization.initType = "PROCEDURAL"
    # If PROCEDURAL, use these params
    # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
    initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
    initialization.procedural.initialLocation.home.radiusInMeters = 500
    #     initialization.parking.filePath = ${beam.inputDirectory}"/../parking/sfbay_taz_unlimited_depots.csv"
    initialization.procedural.vehicleTypeId="cv-L1-61000-2019"
    initialization.procedural.fractionOfInitialVehicleFleet = 0.00184043
    # If FILE, use this param
    initialization.filePath=${beam.inputDirectory}"/rideHailFleet.csv.gz"
    # Ride Hailing General Params
    defaultBaseCost=100.1
    defaultCostPerMile=1.12
    defaultCostPerMinute=0.32
    pooledBaseCost=0
    pooledCostPerMile=0
    pooledCostPerMinute=0.00
    refuelThresholdInMeters=1000.0
    rideHailManager.radiusInMeters=5000
    iterationStats.timeBinSizeInSec=3600
    # SurgePricing parameters
    surgePricing.surgeLevelAdaptionStep=0.1
    surgePricing.minimumSurgeLevel=0.1
    # priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
    surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
    # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
    allocationManager.name="POOLING_ALONSO_MORA"
    allocationManager.alonsoMora.waitingTimeInSec = 1200
    allocationManager.alonsoMora.travelTimeDelayAsFraction= 0.5
    allocationManager.alonsoMora.solutionSpaceSizePerVehicle = 4
    allocationManager.alonsoMora.maxRequestsPerVehicle = 5
    allocationManager.requestBufferTimeoutInSeconds = 300
    # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
    repositioningManager.name="DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
    repositioningManager.timeout=300
    # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand=2.0
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemandForCAVs=1.7
    repositioningManager.demandFollowingRepositioningManager.fractionOfClosestClustersToConsider=0.2
    repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand=300
    # REPOSITIONING_LOW_WAITING_TIMES
    allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.007
    allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
    allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
    allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
    # repositioningMethod(TOP_SCORES | KMEANS)
    allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
    allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
    allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
    allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
    allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
    allocationManager.repositionLowWaitingTimes.demandWeight=4.0
    allocationManager.repositionLowWaitingTimes.produceDebugImages=true
  }
]


beam.exchange.scenario {
  # source for now can be "MATSim" or "UrbanSim"
  source = "urbansim_v2"
  # Input file format for scenario loader can be "csv" or "parquet"
  fileFormat = "csv"
  folder = ${beam.inputDirectory}"/urbansim/no_modes"
  convertWgs2Utm = true
  modeMap = [
    "BIKE           -> bike",
    "DRIVEALONEFREE -> car",
    "DRIVEALONEPAY  -> car",
    "DRIVE_COM      -> drive_transit",
    "DRIVE_EXP      -> drive_transit",
    "DRIVE_HVY      -> drive_transit",
    "DRIVE_LOC      -> drive_transit",
    "DRIVE_LRF      -> drive_transit",
    "SHARED2FREE    -> car",
    "SHARED2PAY     -> car",
    "SHARED3FREE    -> car",
    "SHARED3PAY     -> car",
    "TAXI           -> ride_hail",
    "TNC_SHARED     -> ride_hail",
    "TNC_SINGLE     -> ride_hail",
    "WALK           -> walk",
    "WALK_COM       -> walk_transit",
    "WALK_EXP       -> walk_transit",
    "WALK_HVY       -> walk_transit",
    "WALK_LOC       -> walk_transit",
    "WALK_LRF       -> walk_transit",
  ]
}

