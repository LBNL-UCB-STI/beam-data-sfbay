include "sfbay-pilates-baseline_Cruise.conf"

beam.agentsim.simulationName = "sfbay-pilates-baseline_CruiseBAU"
beam.agentsim.ridehail.bestResponseType = 'MIN_UTILITY'
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.sav_coefficient = -2.0

beam.agentsim.agents.rideHail.managers = [
  {
    name = "Uber"
    iterationStats.timeBinSizeInSec = 3600
    ##################################################################
    # RideHail
    ##################################################################
    # Initialization Type(PROCEDURAL | FILE)
    initialization.initType = "FILE"
    # If PROCEDURAL, use these params
    # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
    initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
    initialization.procedural.initialLocation.home.radiusInMeters = 500
#     initialization.parking.filePath = ${beam.inputDirectory}"/../parking/sfbay_taz_unlimited_depots.csv"
    initialization.procedural.vehicleTypeId="cv-L1-61000-2019"
    initialization.procedural.fractionOfInitialVehicleFleet = 0.00287777
    # If FILE, use this param
    initialization.filePath=${beam.inputDirectory}"/FleetInitialization-Uber.csv"
    # Ride Hailing General Params
    defaultBaseCost=4.77
    defaultCostPerMile=1.07
    defaultCostPerMinute=0.28
    pooledBaseCost=3.59
    pooledCostPerMile=0.75
    pooledCostPerMinute=0.08
    refuelThresholdInMeters=1000.0
    rideHailManager.radiusInMeters=5000
    iterationStats.timeBinSizeInSec=3600
    # SurgePricing parameters
    surgePricing.surgeLevelAdaptionStep=0.1
    surgePricing.minimumSurgeLevel=0.1
    # priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
    surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
    # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
    allocationManager.name="POOLING_ALONSO_MORA"
    allocationManager.alonsoMora.waitingTimeInSec = 1200
    allocationManager.alonsoMora.travelTimeDelayAsFraction= 0.5
    allocationManager.alonsoMora.solutionSpaceSizePerVehicle = 4
    allocationManager.alonsoMora.maxRequestsPerVehicle = 5
    allocationManager.requestBufferTimeoutInSeconds = 300
    # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
    repositioningManager.name="DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
    repositioningManager.timeout=300
    # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand=2.0
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemandForCAVs=1.7
    repositioningManager.demandFollowingRepositioningManager.fractionOfClosestClustersToConsider=0.2
    repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand=300
    # REPOSITIONING_LOW_WAITING_TIMES
    allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.007
    allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
    allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
    allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
    # repositioningMethod(TOP_SCORES | KMEANS)
    allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
    allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
    allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
    allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
    allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
    allocationManager.repositionLowWaitingTimes.demandWeight=4.0
    allocationManager.repositionLowWaitingTimes.produceDebugImages=true
  },
  {
      name = "Lyft"
      iterationStats.timeBinSizeInSec = 3600
      ##################################################################
      # RideHail
      ##################################################################
      # Initialization Type(PROCEDURAL | FILE)
      initialization.initType = "FILE"
      # If PROCEDURAL, use these params
      # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
      initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
      initialization.procedural.initialLocation.home.radiusInMeters = 500
  #     initialization.parking.filePath = ${beam.inputDirectory}"/../parking/sfbay_taz_unlimited_depots.csv"
      initialization.procedural.vehicleTypeId="cv-L1-61000-2019"
      initialization.procedural.fractionOfInitialVehicleFleet = 0.00184043
      # If FILE, use this param
      initialization.filePath=${beam.inputDirectory}"/FleetInitialization-Lyft.csv"
      # Ride Hailing General Params
      defaultBaseCost=4.77
      defaultCostPerMile=1.07
      defaultCostPerMinute=0.28
      pooledBaseCost=3.59
      pooledCostPerMile=0.75
      pooledCostPerMinute=0.08
      refuelThresholdInMeters=1000.0
      rideHailManager.radiusInMeters=5000
      iterationStats.timeBinSizeInSec=3600
      # SurgePricing parameters
      surgePricing.surgeLevelAdaptionStep=0.1
      surgePricing.minimumSurgeLevel=0.1
      # priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
      surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
      # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
      allocationManager.name="POOLING_ALONSO_MORA"
      allocationManager.alonsoMora.waitingTimeInSec = 1200
      allocationManager.alonsoMora.travelTimeDelayAsFraction= 0.5
      allocationManager.alonsoMora.solutionSpaceSizePerVehicle = 4
      allocationManager.alonsoMora.maxRequestsPerVehicle = 5
      allocationManager.requestBufferTimeoutInSeconds = 300
      # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
      repositioningManager.name="DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
      repositioningManager.timeout=300
      # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
      repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand=2.0
      repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemandForCAVs=1.7
      repositioningManager.demandFollowingRepositioningManager.fractionOfClosestClustersToConsider=0.2
      repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand=300
      # REPOSITIONING_LOW_WAITING_TIMES
      allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.007
      allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
      allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
      allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
      # repositioningMethod(TOP_SCORES | KMEANS)
      allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
      allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
      allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
      allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
      allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
      allocationManager.repositionLowWaitingTimes.demandWeight=4.0
      allocationManager.repositionLowWaitingTimes.produceDebugImages=true
  },
     {
         name = "Cruise"
         iterationStats.timeBinSizeInSec = 3600
         ##################################################################
         # RideHail
         ##################################################################
         # Initialization Type(PROCEDURAL | FILE)
         initialization.initType = "FILE"
         # If PROCEDURAL, use these params
         # initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
         initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
         initialization.procedural.initialLocation.home.radiusInMeters = 500
         initialization.parking.filePath = ${beam.inputDirectory}"/parking/Cruise_UnlimitedParking_9Stations.csv"
         initialization.procedural.vehicleTypeId="Cruise-Origin_.75kwhMi"
         initialization.procedural.fractionOfInitialVehicleFleet = 0.0005
         # If FILE, use this param
         initialization.filePath=${beam.inputDirectory}"/CruiseFleet_1000_10Psample.csv"
         # Ride Hailing General Params
         defaultBaseCost=3.82
         defaultCostPerMile=0.85
         defaultCostPerMinute=0.22
         pooledBaseCost=2.87
         pooledCostPerMile=0.60
         pooledCostPerMinute=0.07
         refuelThresholdInMeters=1000.0
         rideHailManager.radiusInMeters=5000
         iterationStats.timeBinSizeInSec=3600
         # SurgePricing parameters
         surgePricing.surgeLevelAdaptionStep=0.1
         surgePricing.minimumSurgeLevel=0.1
         # priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
         surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
         # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
         allocationManager.name="POOLING_ALONSO_MORA"
         allocationManager.alonsoMora.waitingTimeInSec = 1200
         allocationManager.alonsoMora.travelTimeDelayAsFraction= 0.5
         allocationManager.alonsoMora.solutionSpaceSizePerVehicle = 4
         allocationManager.alonsoMora.maxRequestsPerVehicle = 5
         allocationManager.requestBufferTimeoutInSeconds = 300
         # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
         repositioningManager.name="DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
         repositioningManager.timeout=300
         # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
         repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand=2.0
         repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemandForCAVs=1.7
         repositioningManager.demandFollowingRepositioningManager.fractionOfClosestClustersToConsider=0.2
         repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand=300
         # REPOSITIONING_LOW_WAITING_TIMES
         allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.007
         allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
         allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
         allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
         # repositioningMethod(TOP_SCORES | KMEANS)
         allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
         allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
         allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
         allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
         allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
         allocationManager.repositionLowWaitingTimes.demandWeight=4.0
         allocationManager.repositionLowWaitingTimes.produceDebugImages=true
	 savCoefficientMultiplier = 1.0
     }
]


beam.agentsim.agentSampleSizeAsFractionOfPopulation = 1.0

beam.replanning.maxAgentPlanMemorySize = 0

beam.agentsim.agents.plans.merge.fraction = 1.0
