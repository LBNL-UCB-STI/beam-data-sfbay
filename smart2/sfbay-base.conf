include "../../common/akka.conf"
include "../../common/metrics.conf"
include "../../common/matsim.conf"


##################################################################
# Agentsim
##################################################################
beam.agentsim.simulationName = "sfbay-base"

# Sampling 10% of SFBay Population
beam.agentsim.agentSampleSizeAsFractionOfPopulation = 0.1
beam.agentsim.firstIteration = 0
beam.agentsim.lastIteration = 0

beam.agentsim.thresholdForWalkingInMeters = 100
beam.agentsim.timeBinSize = 3600
beam.agentsim.startTime = "00:00:00"
beam.agentsim.endTime = "60:00:00"
beam.agentsim.schedulerParallelismWindow = 150
# MODE CHOICE OPTIONS:
# ModeChoiceMultinomialLogit ModeChoiceTransitIfAvailable ModeChoiceDriveIfAvailable ModeChoiceRideHailIfAvailable
# ModeChoiceUniformRandom
beam.agentsim.agents.modalBehaviors.modeChoiceClass = "ModeChoiceMultinomialLogit"
beam.agentsim.agents.modalBehaviors.defaultValueOfTime = 8.0
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.transfer = -1.4
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.car_intercept = 2.0
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.cav_intercept = 0.0
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.walk_transit_intercept = -0.8
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.drive_transit_intercept = 0.0
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.ride_hail_transit_intercept = 0.0
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.ride_hail_intercept = 1.0
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.ride_hail_pooled_intercept = -1.5
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.walk_intercept = -4.6
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.bike_intercept = -5.22
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.bike_transit_intercept = 0.0
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.transit_crowding = 0.0
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.transit_crowding_VOT_multiplier = 0.0
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.transit_crowding_VOT_threshold = 0.5
beam.agentsim.agents.modalBehaviors.multinomialLogit.params.transit_crowding_percentile = 90.0
beam.agentsim.agents.modalBehaviors.modeVotMultiplier.rideHailPooled = 2.0
beam.agentsim.agents.modalBehaviors.lccm.filePath = ${beam.inputDirectory}"/../lccm-long.csv"
beam.agentsim.agents.modeIncentive.filePath = ${beam.inputDirectory}"/../incentives.csv"
beam.agentsim.agents.parking.multinomialLogit.params.distanceMultiplier = -0.086
beam.agentsim.agents.parking.multinomialLogit.params.enrouteDetourMultiplier=1.0
beam.agentsim.agents.parking.multinomialLogit.params.homeActivityPrefersResidentialParkingMultiplier=1.0
beam.agentsim.agents.parking.multinomialLogit.params.parkingPriceMultiplier=-0.005
beam.agentsim.agents.parking.multinomialLogit.params.rangeAnxietyMultiplier=-0.5
beam.agentsim.agents.ptFare.filePath = ${beam.inputDirectory}"/../ptFares.csv"
beam.agentsim.agents.plans {
  inputPlansFilePath = ${beam.inputDirectory}"/../samples/population.xml.gz"
  inputPersonAttributesFilePath = ${beam.inputDirectory}"/../samples/populationAttributes.xml.gz"
  merge {
    fraction=0.3
  }
}
beam.agentsim.agents.households {
  inputFilePath = ${beam.inputDirectory}"/../samples/households.xml.gz"
  inputHouseholdAttributesFilePath = ${beam.inputDirectory}"/../samples/householdAttributes.xml.gz"
}
beam.agentsim.agents.modalBehaviors.transitVehicleTypeVOTMultipliers = [
"BUS-AC:2.0",
"BUS-SF:2.0",
"BUS-ST:2.0",
"BUS-VTA:2.0",
"BUS-DEFAULT:2.0",
"CABLE_CAR-SF:3.0",
"BUS-VN:2.0"]


#BeamVehicles Params
beam.agentsim.agents.population.useVehicleSampling = true
beam.agentsim.agents.vehicles.vehicleAdjustmentMethod = "INCOME_BASED"
beam.agentsim.agents.vehicles.fuelTypesFilePath = ${beam.inputDirectory}"/../samples/fuelTypes.csv"
beam.agentsim.agents.vehicles.vehicleTypesFilePath = ${beam.inputDirectory}"/../smart/vehicle-tech/vehicletypes-baseline.csv"
beam.agentsim.agents.vehicles.vehiclesFilePath = ${beam.inputDirectory}"/../samples/vehicles-cavs.csv.gz"
beam.agentsim.agents.vehicles.sharedFleets = []
beam.agentsim.agents.vehicles.fractionOfInitialVehicleFleet = 1.0
beam.agentsim.agents.vehicles.meanPrivateVehicleStartingSOC = 0.6
beam.agentsim.agents.vehicles.meanRidehailVehicleStartingSOC = 0.6
beam.agentsim.agents.vehicles.dummySharedCar.vehicleTypeId = "conv-L1-75000-to-100000-LowTech-2019"
beam.agentsim.agents.vehicles.generateEmergencyHouseholdVehicleWhenPlansRequireIt = true
### enroute
beam.agentsim.agents.vehicles.enroute.estimateOfMeanChargingDurationInSecond = 1800
beam.agentsim.agents.vehicles.enroute.refuelRequiredThresholdOffsetInMeters = 32186.9 # 20 miles
beam.agentsim.agents.vehicles.enroute.noRefuelThresholdOffsetInMeters = 128748 # 80 miles
beam.agentsim.agents.vehicles.enroute.noRefuelAtRemainingDistanceThresholdInMeters = 500
beam.agentsim.agents.vehicles.enroute.remainingDistanceWrtBatteryCapacityThreshold = 2

# SurgePricing parameters
beam.agentsim.agents.rideHail.surgePricing.surgeLevelAdaptionStep=0.1
beam.agentsim.agents.rideHail.surgePricing.minimumSurgeLevel=0.1
beam.agentsim.agents.rideHail.surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
# Charging Network Manager
beam.agentsim.chargingNetworkManager {
  timeStepInSeconds = 300
  chargingPointCountScalingFactor = 0.1
  chargingPointCostScalingFactor = 0.1
  chargingPointFilePath =  ${beam.inputDirectory}"/../parking/sfbay_taz_unlimited_charging_point.csv"
  scaleUp {
    enabled = false
  }
  helics {
    connectionEnabled = false
  }
}

beam.agentsim.snapLocationAndRemoveInvalidInputs = true
#TAZ params
beam.agentsim.taz.filePath=${beam.inputDirectory}"/../taz-centers.csv"
beam.agentsim.taz.parkingFilePath = ${beam.inputDirectory}"/../parking/sfbay-parking-stalls.csv"
beam.agentsim.taz.parkingStallCountScalingFactor = 0.1
beam.agentsim.taz.parkingCostScalingFactor = 0.1

#Toll params
#not found
beam.agentsim.toll.filePath=${beam.inputDirectory}"/../toll-prices.csv"
# Scaling and Tuning Params
beam.agentsim.tuning.transitCapacity = 0.2
beam.agentsim.tuning.transitPrice = 1.0
beam.agentsim.tuning.tollPrice = 1.0
beam.agentsim.tuning.rideHailPrice = 1.0
###########################
# DEMAND
###########################
beam.exchange.scenario {
    # source for now can be "MATSim" or "UrbanSim"
    source = "urbansim_v2"
    # Input file format for scenario loader can be "csv" or "parquet"
    fileFormat = "csv"
    folder = ${beam.inputDirectory}"/../activitysim/2018"
    convertWgs2Utm = true
    modeMap = [
        "BIKE           -> bike",
        "DRIVEALONEFREE -> car",
        "DRIVEALONEPAY  -> car",
        "DRIVE_COM      -> drive_transit",
        "DRIVE_EXP      -> drive_transit",
        "DRIVE_HVY      -> drive_transit",
        "DRIVE_LOC      -> drive_transit",
        "DRIVE_LRF      -> drive_transit",
        "SHARED2FREE    -> car",
        "SHARED2PAY     -> car",
        "SHARED3FREE    -> car",
        "SHARED3PAY     -> car",
        "TAXI           -> ride_hail",
        "TNC_SHARED     -> ride_hail_pooled",
        "TNC_SINGLE     -> ride_hail",
        "WALK           -> walk",
        "WALK_COM       -> walk_transit",
        "WALK_EXP       -> walk_transit",
        "WALK_HVY       -> walk_transit",
        "WALK_LOC       -> walk_transit",
        "WALK_LRF       -> walk_transit",
    ]
    urbansim {
        activitySimEnabled=false
    }
}
###########################
# Physsim
###########################
# population
# There are 6 015 030 persons with plans
# 0.001 -> 6k
# 0.005 -> 30k
# 0.01  -> 60k
# 0.0117 -> 70k
# 0.02  -> 120k flow cap ->  0.04
# 0.04  -> 240k flow cap ->  0.05
# 0.1   -> 601k flow cap ~   0.12
# 0.15  -> 902k flow cap ~   0.16
beam.physsim.flowCapacityFactor = 0.12
beam.physsim.speedScalingFactor = 1.0
beam.physsim.storageCapacityFactor = 1.0
beam.physsim.writeEventsInterval = 0
beam.physsim.writePlansInterval = 0
beam.physsim.writeMATSimNetwork = true
beam.physsim.linkStatsWriteInterval = 1
beam.physsim.linkStatsBinSize = 3600
beam.physsim.ptSampleSize = 0.125
beam.physsim.jdeqsim.agentSimPhysSimInterfaceDebugger.enabled = false
beam.physsim.skipPhysSim = false
beam.physsim.jdeqsim.cacc.enabled = true
beam.physsim.jdeqsim.cacc.adjustedMinimumRoadSpeedInMetersPerSecond = 2.0
beam.physsim.quick_fix_minCarSpeedInMetersPerSecond = 2.0
beam.physsim.jdeqsim.cacc.minimumRoadSpeedInMetersPerSecond = 2.0
beam.physsim.events.fileOutputFormats = "csv.gz"
beam.physsim.eventsForFullVersionOfVia = false
beam.physsim.name = "PARBPRSim"
###########################
# Replanning
###########################
beam.replanning{
  maxAgentPlanMemorySize = 4
  Module_1 = "SelectExpBeta"
  ModuleProbability_1 = 0.7
  Module_2 = "ClearRoutes"
  ModuleProbability_2 = 0.3
  Module_3 = "ClearModes"
  ModuleProbability_3 = 0.0
  Module_4 = "TimeMutator"
  ModuleProbability_4 = 0.0
}

##################################################################
# Warm Mode
##################################################################
#PATH TYPE OPTIONS: PARENT_RUN, ABSOLUTE_PATH
#PARENT_RUN: can be a director or zip archive of the output directory (e.g. like what get's stored on S3). We should also be able to specify a URL to an S3 output.
#ABSOLUTE_PATH: a directory that contains required warm stats files (e.g. linkstats and eventually a plans).
beam.warmStart {
    prepareData = false
    path = ${beam.inputDirectory}"/../activitysim/2018/warmstart_data.zip"
    samplePopulationIntegerFlag=0
    type = "linkStatsOnly"
}

##################################################################
# RideHail
##################################################################
# Initialization Type(PROCEDURAL | FILE)
beam.agentsim.agents.rideHail.initialization.initType = "PROCEDURAL"
# If PROCEDURAL, use these params
# initialization.procedural.initialLocation.name(INITIAL_RIDE_HAIL_LOCATION_HOME | INITIAL_RIDE_HAIL_LOCATION_UNIFORM_RANDOM | INITIAL_RIDE_HAIL_LOCATION_ALL_AT_CENTER | INITIAL_RIDE_HAIL_LOCATION_ALL_IN_CORNER)
beam.agentsim.agents.rideHail.initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
beam.agentsim.agents.rideHail.initialization.procedural.initialLocation.home.radiusInMeters = 500
beam.agentsim.agents.rideHail.initialization.procedural.vehicleTypeId="conv-L1-75000-to-100000-LowTech-2019"
beam.agentsim.agents.rideHail.initialization.procedural.fractionOfInitialVehicleFleet = 0.005
# If FILE, use this param
#not found
#beam.agentsim.agents.rideHail.initialization.filePath=${beam.inputDirectory}"/../rideHailFleet.csv.gz"
beam.agentsim.agents.rideHail.initialization.filePath=""
beam.agentsim.agents.rideHail.initialization.parking.filePath = ${beam.inputDirectory}"/../parking/sfbay_taz_unlimited_depots.csv"
# Ride Hailing General Params
beam.agentsim.agents.rideHail.defaultBaseCost=1.8
beam.agentsim.agents.rideHail.defaultCostPerMile=0.91
beam.agentsim.agents.rideHail.defaultCostPerMinute=0.28
beam.agentsim.agents.rideHail.pooledBaseCost=1.89
beam.agentsim.agents.rideHail.pooledCostPerMile=1.11
beam.agentsim.agents.rideHail.pooledCostPerMinute=0.07
beam.agentsim.agents.rideHail.refuelThresholdInMeters=1000.0
beam.agentsim.agents.rideHail.rideHailManager.radiusInMeters=5000
beam.agentsim.agents.rideHail.iterationStats.timeBinSizeInSec=3600
# SurgePricing parameters
beam.agentsim.agents.rideHail.surgePricing.surgeLevelAdaptionStep=0.1
beam.agentsim.agents.rideHail.surgePricing.minimumSurgeLevel=0.1
# priceAdjustmentStrategy(KEEP_PRICE_LEVEL_FIXED_AT_ONE | CONTINUES_DEMAND_SUPPLY_MATCHING)
beam.agentsim.agents.rideHail.surgePricing.priceAdjustmentStrategy="KEEP_PRICE_LEVEL_FIXED_AT_ONE"
# allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
beam.agentsim.agents.rideHail.allocationManager.name="POOLING_ALONSO_MORA"
beam.agentsim.agents.rideHail.allocationManager.alonsoMora.waitingTimeInSec = 1200
beam.agentsim.agents.rideHail.allocationManager.alonsoMora.travelTimeDelayAsFraction= 0.5
beam.agentsim.agents.rideHail.allocationManager.alonsoMora.solutionSpaceSizePerVehicle = 4
beam.agentsim.agents.rideHail.allocationManager.alonsoMora.maxRequestsPerVehicle = 5
beam.agentsim.agents.rideHail.allocationManager.requestBufferTimeoutInSeconds = 300
# repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
beam.agentsim.agents.rideHail.repositioningManager.name="DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
beam.agentsim.agents.rideHail.repositioningManager.timeout=300
# DEMAND_FOLLOWING_REPOSITIONING_MANAGER
beam.agentsim.agents.rideHail.repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand=2.0
beam.agentsim.agents.rideHail.repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemandForCAVs=1.7
beam.agentsim.agents.rideHail.repositioningManager.demandFollowingRepositioningManager.fractionOfClosestClustersToConsider=0.2
beam.agentsim.agents.rideHail.repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand=300
# REPOSITIONING_LOW_WAITING_TIMES
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition=0.007
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning=1200
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow=true
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius=0.1
# repositioningMethod(TOP_SCORES | KMEANS)
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.repositioningMethod="TOP_SCORES"
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.keepMaxTopNScores=5
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning=0.00001
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.distanceWeight=0.01
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.waitingTimeWeight=4.0
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.demandWeight=4.0
beam.agentsim.agents.rideHail.allocationManager.repositionLowWaitingTimes.produceDebugImages=true

# Freight
beam.agentsim.agents.freight.enabled = false

##################################################################
# OUTPUTS
##################################################################
# The baseOutputDirectory is the base directory where outputs will be written. The beam.agentsim.simulationName param will
# be used as the name of a sub-directory beneath the baseOutputDirectory for simulation results.
# If addTimestampToOutputDirectory == true, a timestamp will be added, e.g. "beamville_2017-12-18_16-48-57"
beam.outputs.baseOutputDirectory = ${PWD}"/output/sfbay"
beam.outputs.baseOutputDirectory = ${?BEAM_OUTPUT}
beam.outputs.addTimestampToOutputDirectory = true

# The remaining params customize how events are written to output files
beam.outputs.events.fileOutputFormats = "csv.gz" # valid options: xml(.gz) , csv(.gz), none - DEFAULT: csv.gz

# Events Writing Logging Levels:
beam.outputs.events.eventsToWrite = "PersonArrivalEvent,PersonDepartureEvent,ActivityEndEvent,ActivityStartEvent,PersonEntersVehicleEvent,PersonLeavesVehicleEvent,ModeChoiceEvent,PathTraversalEvent,ReserveRideHailEvent,ReplanningEvent,RefuelSessionEvent,ChargingPlugInEvent,ChargingPlugOutEvent,ParkingEvent,LeavingParkingEvent,PersonCostEvent,TeleportationEvent"
beam.outputs.stats.binSize = 3600

# To keep all logging params in one place, BEAM overrides MATSim params normally in the controller config module
beam.outputs.defaultWriteInterval = 5
beam.beamskimmer.writeObservedSkimsInterval = ${beam.outputs.defaultWriteInterval}
beam.beamskimmer.writeAllModeSkimsForPeakNonPeakPeriodsInterval = 0
beam.beamskimmer.writeObservedSkimsPlusInterval = ${beam.outputs.defaultWriteInterval}
beam.beamskimmer.writeFullSkimsInterval = 0
beam.outputs.writePlansInterval = ${beam.outputs.defaultWriteInterval}
beam.outputs.writeEventsInterval = ${beam.outputs.defaultWriteInterval}
beam.physsim.writeEventsInterval = 10
beam.physsim.writePlansInterval = 10
beam.physsim.writeRouteHistoryInterval = 0
beam.physsim.linkStatsWriteInterval = ${beam.outputs.defaultWriteInterval}
beam.outputs.generalizedLinkStatsInterval = 0

beam.outputs.generalizedLinkStats.startTime = 0
beam.outputs.generalizedLinkStats.endTime = 108000
beam.outputs.stats.binSize = 3600
beam.outputs.writeAnalysis = false

##################################################################
# Debugging
##################################################################
beam.debug.debugEnabled = false
beam.debug.actor.logDepth = 2
beam.debug.vmInformation.createGCClassHistogram = true

beam.debug.stuckAgentDetection {
  checkIntervalMs = 200
  checkMaxNumberOfMessagesEnabled = true
  defaultTimeoutMs = 60000
  enabled = false
  overallSimulationTimeoutMs = 100000
  thresholds = [
    {
      actorTypeToMaxNumberOfMessages {
        population = 1
        rideHailAgent = 1
        transitDriverAgent = 1
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.InitializeTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 11
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.PersonAgent$ActivityEndTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 1
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.PersonAgent$ActivityStartTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 20
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.PersonAgent$PersonDepartureTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 20
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$AlightVehicleTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 20
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$BoardVehicleTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 80,
        rideHailAgent = 104,
        transitDriverAgent = 114
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$EndLegTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        population = 80,
        rideHailAgent = 104,
        transitDriverAgent = 114
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.agents.modalbehaviors.DrivesVehicle$StartLegTrigger"
    },
    {
      actorTypeToMaxNumberOfMessages {
        transitDriverAgent = 1
      }
      markAsStuckAfterMs = 20000
      triggerType = "beam.agentsim.scheduler.BeamAgentScheduler$KillTrigger"
    }
  ]
}



##################################################################
# SPATIAL
##################################################################
beam.spatial = {
  localCRS = "epsg:26910"  # what crs to use for distance calculations, must be in units of meters
  boundingBoxBuffer = 10000 # meters of buffer around network for defining extend of spatial indices
}

##################################################################
# BEAM ROUTING SERVICE
##################################################################
#not found
beam.physsim.inputNetworkFilePath = ${beam.inputDirectory}"/../r5-simple-no-local/physsim-network.xml"
beam.routing = {
  #Base local date in ISO 8061 YYYY-MM-DDTHH:MM:SS+HH:MM
  transitOnStreetNetwork = true
  baseDate = "2017-09-22T00:00:00-07:00"
  r5 {
    directory = ${beam.inputDirectory}"/../r5-simple-no-local"
    # Departure window in min
    departureWindow = 1.0167
    osmFile = ${beam.inputDirectory}"/../r5-simple-no-local/bay_area_simplified_tertiary_strongly_2_way_network.osm.pbf"
    #not found
    osmMapdbFile = ${beam.inputDirectory}"/../r5-simple-no-local/osm.mapdb"
    mNetBuilder.fromCRS = "epsg:4326" # WGS84
    mNetBuilder.toCRS = ${beam.spatial.localCRS}
    travelTimeNoiseFraction = 0.15
    transitAlternativeList = "NONOPTIMAL"
    suboptimalMinutes = 10
  }
  startingIterationForTravelTimesMSA = 2
}

##################################################################
# Calibration
##################################################################
beam.calibration.objectiveFunction = "CountsObjectiveFunction"
beam.calibration.mode.benchmarkFilePath=${beam.inputDirectory}"/../calibration/benchmark.csv"
beam.calibration.counts {
  countsScaleFactor = 10.355
  writeCountsInterval = 1
  averageCountsOverIterations = 1
}

beam.calibration.studyArea {
  enabled = true
  lat = 30.259504
  lon = -97.7431187
  radius = 20000
}

beam.physsim.network.overwriteRoadTypeProperties {
    enabled = true
    motorway.speed = 31.2928
    motorwayLink.capacity = 4000
    motorwayLink.speed = 30.3
    primary.speed = 27.7
    primaryLink.capacity = 4000
    primaryLink.speed = 23.7
    trunk.speed = 25.8224
    trunkLink.capacity = 3000
    trunkLink.speed = 25.5
    secondary.speed = 27.0
    secondaryLink.capacity = 3000
    secondaryLink.speed = 25.8
    tertiary.speed = 12.0112
    tertiaryLink.speed =  7.4408
    residential.speed = 13.4112
    livingStreet.speed = 13.4112
    unclassified.speed = 15.6464
    unclassified.capacity = 3000
    road.capacity = 3000
}

beam.physsim.overwriteLinkParamPath = ""
beam.physsim.network.overwriteRoadTypeProperties {
    motorway.alpha = 0.83 #Freeway
    motorway.beta = 5.5 #Freeway
    # motorway.speed = 31.2928 * 1.0
    motorway.speed = 31.2928

    motorwayLink.alpha = 0.83 #Freeway-to-Freeway Connector
    motorwayLink.beta = 5.5 #Freeway-to-Freeway Connector
    # motorwayLink.speed = 30.3 * 1.3
    motorwayLink.speed = 39.39

    trunk.alpha = 0.71 #Expressway
    trunk.beta = 2.1 #Expressway
    # trunk.speed = 25.8224 * 1.0
    trunk.speed = 25.8224

    trunkLink.alpha = 0.83 #Ramp
    trunkLink.beta = 5.5 #Ramp
    # trunkLink.speed = 25.5 * 1.3
    trunkLink.speed = 33.15

    primary.alpha = 0.6 #Super Arterial
    primary.beta = 3.5 #Super Arterial
    # primary.speed = 27.7 * 1.8
    primary.speed = 49.86

    primaryLink.alpha = 0.83 #Ramp
    primaryLink.beta = 5.5 #Ramp
    # primaryLink.speed = 23.7 * 1.3
    primaryLink.speed = 30.81

    secondary.alpha = 0.6 #Major Arterial
    secondary.beta = 3.5 #Major Arterial
    #secondary.speed = 27 * 1.8
    secondary.speed = 48.6

    secondaryLink.alpha = 0.83 #Ramp
    secondaryLink.beta = 5.5 #Ramp
    #secondaryLink.speed = 25.8 * 1.3
    secondaryLink.speed = 33.54

    tertiary.alpha = 0.6 #Minor Arterial
    tertiary.beta = 3.5 #Minor Arterial
    # tertiary.speed = 12.0112 * 1.8
    tertiary.speed = 21.62016

    tertiaryLink.alpha = 0.83 #Ramp
    tertiaryLink.beta = 5.5 #Ramp
    #tertiaryLink.speed = 7.4408 * 1.3
    tertiaryLink.speed = 9.67304

    minor.alpha = 0.6 #Collector
    minor.beta = 8.5 #Collector

    unclassified.alpha = 0.6 #Collector
    unclassified.beta = 8.5 #Collector
    # unclassified.speed = 15.6464 * 1.8
    unclassified.speed = 28.16352

    residential.alpha = 0.6 #Local Street
    residential.beta = 8.5 #Local Street
    # residential.speed = 13.4112 * 1.8
    residential.speed = 124.14016

    livingStreet.alpha = 0.6 #Alley
    livingStreet.beta = 8.5 #Alley
    #livingStreet.speed = 13.4112 * 1.8
    livingStreet.speed = 24.14016
}

beam.urbansim.fractionOfModesToClear {
  allModes = 0.0
  car = 0.0
  bike = 0.0
  walk = 0.0
  walk_transit = 0.0
  drive_transit = 0.0
}

beam.calibration.google.travelTimes {
    enable=false
    iterationInterval=10
    minDistanceInMeters=5000.0
    numDataPointsOver24Hours=1000
    offPeakEnabled=false
    queryDate="2020-10-14"
    tolls=true
}

beam.router.skim = {
  origin-destination-skimmer {
    writeAllModeSkimsForPeakNonPeakPeriodsInterval = 0
    writeFullSkimsInterval = 0
  }
}