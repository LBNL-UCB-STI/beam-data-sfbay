include "smart-baseline-2010.conf"

beam.agentsim.simulationName = "sfbay-smart-base-2-rh-fleets"

beam.agentsim.firstIteration = 0
beam.agentsim.lastIteration = 1

##################################################################
# RideHail
##################################################################

beam.agentsim.agents.rideHail.managers = [
  {
    name = "Uber"
    # Initialization Type(PROCEDURAL | FILE)
    initialization.initType = "PROCEDURAL"
    # If PROCEDURAL, use these params
    # initialLocation(HOME | UNIFORM_RANDOM | ALL_AT_CENTER | ALL_IN_CORNER | RANDOM_ACTIVITY)
    initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
    initialization.procedural.initialLocation.home.radiusInMeters = 500
    initialization.procedural.vehicleTypeId = "conv-L1-10000-to-25000-LowTech-2019"
    initialization.procedural.fractionOfInitialVehicleFleet = 0.05 //How many ride hail agents, as a portion of initial total personal vehicles
    initialization.parking.filePath = ${beam.inputDirectory}"/../parking/depot-parking-unlimited-150.csv"

    # If FILE, use this param
    #initialization.filePath=${beam.inputDirectory}"/../rideHailFleet.csv"
    defaultBaseCost = 1.8
    defaultCostPerMile = 0.91
    defaultCostPerMinute = 0.28
    pooledBaseCost = 1.89
    pooledCostPerMile = 1.11
    pooledCostPerMinute = 0.07
    refuelThresholdInMeters = 1000.0
    rideHailManager.radiusInMeters = 5000
    refuelLocationType = "AtTAZCenter"
    # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
    allocationManager.name = "POOLING_ALONSO_MORA"
    allocationManager.alonsoMora.waitingTimeInSec = 1200
    allocationManager.alonsoMora.travelTimeDelayAsFraction = 0.5
    allocationManager.alonsoMora.solutionSpaceSizePerVehicle = 4
    allocationManager.requestBufferTimeoutInSeconds = 300
    # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
    repositioningManager.name = "DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
    repositioningManager.timeout = 300
    # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand = 3.4
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemandForCAVs = 1.7
    repositioningManager.demandFollowingRepositioningManager.fractionOfClosestClustersToConsider = 0.2
    repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand = 300
    # REPOSITIONING_LOW_WAITING_TIMES
    allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition = 0.01
    allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning = 1200
    allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow = true
    allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius = 0.1
    # repositioningMethod(TOP_SCORES | KMEANS)
    allocationManager.repositionLowWaitingTimes.repositioningMethod = "TOP_SCORES"
    allocationManager.repositionLowWaitingTimes.keepMaxTopNScores = 5
    allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning = 0.00001
    allocationManager.repositionLowWaitingTimes.distanceWeight = 0.01
    allocationManager.repositionLowWaitingTimes.waitingTimeWeight = 4.0
    allocationManager.repositionLowWaitingTimes.demandWeight = 4.0
    allocationManager.repositionLowWaitingTimes.produceDebugImages = true
  },
  {
    name = "Lyft"
    # Initialization Type(PROCEDURAL | FILE)
    initialization.initType = "PROCEDURAL"
    # If PROCEDURAL, use these params
    # initialLocation(HOME | UNIFORM_RANDOM | ALL_AT_CENTER | ALL_IN_CORNER | RANDOM_ACTIVITY)
    initialization.procedural.initialLocation.name = "RANDOM_ACTIVITY"
    initialization.procedural.initialLocation.home.radiusInMeters = 500
    initialization.procedural.vehicleTypeId = "conv-L1-10000-to-25000-LowTech-2019"
    initialization.procedural.fractionOfInitialVehicleFleet = 0.05 //How many ride hail agents, as a portion of initial total personal vehicles
    initialization.parking.filePath = ${beam.inputDirectory}"/../parking/depot-parking-unlimited-150.csv"

    # If FILE, use this param
    #initialization.filePath=${beam.inputDirectory}"/../rideHailFleet.csv"
    defaultBaseCost = 1.8
    defaultCostPerMile = 0.91
    defaultCostPerMinute = 0.28
    pooledBaseCost = 1.89
    pooledCostPerMile = 1.11
    pooledCostPerMinute = 0.07
    refuelThresholdInMeters = 1000.0
    rideHailManager.radiusInMeters = 5000
    refuelLocationType = "AtTAZCenter"
    # allocationManager(DEFAULT_MANAGER | STANFORD_V1 | BUFFERED_IMPL_TEMPLATE | RANDOM_REPOSITIONING | REPOSITIONING_LOW_WAITING_TIMES | DUMMY_DISPATCH_WITH_BUFFERING | POOLING_ALONSO_MORA)
    allocationManager.name = "POOLING_ALONSO_MORA"
    allocationManager.alonsoMora.waitingTimeInSec = 1200
    allocationManager.alonsoMora.travelTimeDelayAsFraction = 0.5
    allocationManager.alonsoMora.solutionSpaceSizePerVehicle = 4
    allocationManager.requestBufferTimeoutInSeconds = 300
    # repositioningManager can be DEFAULT_REPOSITIONING_MANAGER | DEMAND_FOLLOWING_REPOSITIONING_MANAGER | REPOSITIONING_LOW_WAITING_TIMES
    repositioningManager.name = "DEMAND_FOLLOWING_REPOSITIONING_MANAGER"
    repositioningManager.timeout = 300
    # DEMAND_FOLLOWING_REPOSITIONING_MANAGER
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemand = 3.4
    repositioningManager.demandFollowingRepositioningManager.sensitivityOfRepositioningToDemandForCAVs = 1.7
    repositioningManager.demandFollowingRepositioningManager.fractionOfClosestClustersToConsider = 0.2
    repositioningManager.demandFollowingRepositioningManager.numberOfClustersForDemand = 300
    # REPOSITIONING_LOW_WAITING_TIMES
    allocationManager.repositionLowWaitingTimes.percentageOfVehiclesToReposition = 0.01
    allocationManager.repositionLowWaitingTimes.timeWindowSizeInSecForDecidingAboutRepositioning = 1200
    allocationManager.repositionLowWaitingTimes.allowIncreasingRadiusIfDemandInRadiusLow = true
    allocationManager.repositionLowWaitingTimes.minDemandPercentageInRadius = 0.1
    # repositioningMethod(TOP_SCORES | KMEANS)
    allocationManager.repositionLowWaitingTimes.repositioningMethod = "TOP_SCORES"
    allocationManager.repositionLowWaitingTimes.keepMaxTopNScores = 5
    allocationManager.repositionLowWaitingTimes.minScoreThresholdForRepositioning = 0.00001
    allocationManager.repositionLowWaitingTimes.distanceWeight = 0.01
    allocationManager.repositionLowWaitingTimes.waitingTimeWeight = 4.0
    allocationManager.repositionLowWaitingTimes.demandWeight = 4.0
    allocationManager.repositionLowWaitingTimes.produceDebugImages = true
  }
]